@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ListsWebApp.Data
@inject Data.LoginState loginState;
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ProtectedLocalStorage browserStorage


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Lists</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        @if (!loginState.IsLoggedIn)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Log in
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Register
                </NavLink>
            </li>
        }
        else
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="lists">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Lists
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick="@HandleLogout">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Log out
                </NavLink>
            </li>
        }

    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    async Task HandleLogout()
    {
        await browserStorage.DeleteAsync("acc");
        loginState.SetLogin(false, "", -1);
        navigationManager.NavigateTo("/login");
    }

    protected override void OnInitialized()
    {
        loginState.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }
}
