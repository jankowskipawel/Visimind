@page "/listView/{listid}"

@using DataLibrary
@using Microsoft.Extensions.Configuration
@using ListsWebApp.Models
@using System.IO
@using System.Net
@using System.Xml.Linq
@using System.Collections.Specialized
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Hosting
@inject IDataAccess _data
@inject IConfiguration _config
@inject Data.LoginState loginState;
@inject IJSRuntime JsRuntime;
@inject IWebHostEnvironment env
@inject ProtectedLocalStorage browserStorage



@if (loginState.IsLoggedIn)
{
    <h3 class="d-inline">@listName</h3>
    <button class="btn btn-primary d-inline ml-4" @onclick="()=>OnInitializedAsync()">Refresh</button>

    @if (listItems == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul>
            @foreach (var listItem in listItems)
            {
                <li class="mt-3">
                    <input type="checkbox" checked="@listItem.IsDone" @onchange="() => UpdateCheckbox(listItem.Id, Convert.ToInt32(!listItem.IsDone))" />
                    @if (listItem.Title.StartsWith($"{env.WebRootPath}\\img"))
                    {
                        <img class="ml-3" style="max-height:500px;max-width:500px;" src="\img\@listItem.Title.Split("\\").Last()" />
                        <button class="btn btn-danger py-0 px-1 ml-2" @onclick="() => DeleteItem(listItem.Id)">x</button>
                        <div style="margin-left: 200px;" class="d-block mt-2">
                        <button type="button" class="btn btn-outline-success" @onclick="() => AddReaction(listItem.Id, true)">Yes</button>
                        @if (imageReactions.ContainsKey(@listItem.Id))
                        {
                            <p class="d-inline mx-1">@imageReactions[@listItem.Id]</p>
                        }
                        else
                        {
                            <p class="d-inline mx-1">0</p>
                        }
                            <button type="button" class="btn btn-outline-danger" @onclick="() => AddReaction(listItem.Id, false)">No</button>
                        </div>
                    }
                    else
                    {
                        <la class="ml-3">@listItem.Title</la>
                        <button class="btn btn-danger py-0 px-1 ml-2" @onclick="() => DeleteItem(listItem.Id)">x</button>
                    }
                </li>
            }
        </ul>
    }

    <input style="width: 303px;" placeholder="Item name..." @bind="newItem" />
    <button style="width: 103px;" class="btn btn-primary" @onclick="AddItem">Add item</button>
    <form class="mt-5" @onsubmit="SingleUpload">
        <InputFile OnChange="OnInputFileChange" />
        <button style="width: 103px;" class="btn btn-primary" type="submit">Add image</button>
    </form>

    <h3 class="mt-5">Share list</h3>
    <input style="width: 303px;" placeholder="Username..." @bind="usernameToShare" />
    <button style="width: 103px;" class="btn btn-primary" @onclick="ShareList">Share List</button>


}
else
{
    <h3>Please log in first</h3>
}
@code {
    [Parameter]
    public string listid { get; set; }
    private string newItem;
    List<ListItem> listItems;
    List<ListWA> userOwnedLists;
    private string usernameToShare;
    IBrowserFile file;
    string filePath;
    List<ListWA> listNames;
    string listName;
    List<ImageReaction> allImageReactions;
    Dictionary<int, int> imageReactions;


    protected override async Task OnInitializedAsync()
    {
        string sql = $"select * from listitems where listid = '{listid}'";
        listItems = await _data.LoadData<ListItem, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        sql = $"select * from lists where id = '{listid}'";
        listNames = await _data.LoadData<ListWA, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        listName = listNames[0].Name;
        sql = $"select * from imagereactions where listid = '{listid}'";
        allImageReactions = await _data.LoadData<ImageReaction, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        imageReactions = CountReactions(allImageReactions);
    }

    async Task AddReaction(int itemId, bool isPositive)
    {
        if (DidUserAlreadyVote(loginState.userId, itemId))
        {
            List<ImageReaction> previousVote;
            string sql = $"select * from imagereactions where listItemId = '{itemId}' and givenByUserId = '{loginState.userId}'";
            previousVote = await _data.LoadData<ImageReaction, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            //if ispositive is not equal to prevoius vote
            if (isPositive != previousVote[0].IsPositive)
            {
                sql = $"update imagereactions set isPositive = '{Convert.ToInt32(isPositive)}' where listItemId = '{itemId}' and givenByUserId = '{loginState.userId}'";
                await _data.SaveData(sql, new {  }, _config.GetConnectionString("default"));
            }
            else
            {
                sql = $"delete from imagereactions where listItemId = '{itemId}' and givenByUserId = '{loginState.userId}'";
                await _data.SaveData(sql, new { }, _config.GetConnectionString("default"));
            }
        }
        else
        {
            string sql = $"insert into imagereactions (givenByUserId, listItemId, isPositive, listid) values (@givenByUserId, @listItemId, @IsPositive, @Listid)";
            await _data.SaveData(sql, new { givenByUserId = loginState.userId, listItemId = itemId, IsPositive = isPositive , Listid = listid}, _config.GetConnectionString("default"));

        }
        await OnInitializedAsync();
    }

    private bool DidUserAlreadyVote(int userId, int itemId)
    {
        foreach (var reaction in allImageReactions)
        {
            if (reaction.ListItemId == itemId && reaction.GivenByUserId == userId)
            {
                return true;
            }
        }
        return false;
    }

    Dictionary<int, int> CountReactions(List<ImageReaction> imageReactions)
    {
        Dictionary<int, int> result = new Dictionary<int, int>();
        foreach (var ir in imageReactions)
        {
            if (ir.IsPositive)
            {
                result.TryGetValue(ir.ListItemId, out var count);
                result[ir.ListItemId] = count + 1;
            }
            else
            {
                result.TryGetValue(ir.ListItemId, out var count);
                result[ir.ListItemId] = count - 1;
            }
        }
        return result;
    }

    private async Task UpdateCheckbox(int id, int isDone)
    {
        string sql = $"update listitems set isDone = '{isDone}' where id = '{id}'";
        await _data.SaveData(sql, new { }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task AddItem()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            string sql = "insert into listitems (title, listid, isDone) values (@Title, @ListId, @IsDone);";
            await _data.SaveData(sql, new { Title = newItem, ListId = listid, IsDone = 0 }, _config.GetConnectionString("default"));
            newItem = string.Empty;
            await OnInitializedAsync();
        }
    }

    private async Task AddImage(string path)
    {
        string sql = "insert into listitems (title, listid, isDone) values (@Title, @ListId, @IsDone);";
        await _data.SaveData(sql, new { Title = path, ListId = listid, IsDone = 0 }, _config.GetConnectionString("default"));
        await OnInitializedAsync();
    }

    private async Task DeleteItem(int id)
    {
        string sql = $"delete from listitems where id = '{id}'";
        await _data.SaveData(sql, new { Title = newItem, ListId = 1, IsDone = 0 }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task ShareList()
    {
        string sql = $"select * from users where login = '{usernameToShare}'";
        List<User> users = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        if (users.Count == 1 && users[0].Id != loginState.userId)
        {
            sql = $"select * from lists where userid = '{users[0].Id}'";
            userOwnedLists = await _data.LoadData<ListWA, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            if (!isInList(userOwnedLists, listid))
            {
                sql = $"insert into sharedlists (userid, listid) values (@UserId, @ListId);";
                await _data.SaveData(sql, new { UserId = users[0].Id, ListId = listid }, _config.GetConnectionString("default"));
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "You can't share list with the owner");
            }
            usernameToShare = "";

        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Could not find given username");

        }
        await OnInitializedAsync();
    }

    bool isInList(List<ListWA> lists, string id)
    {
        foreach (var list in lists)
        {
            if (list.Id.ToString() == id)
            {
                return true;
            }
        }
        return false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
        this.StateHasChanged();
    }

    private async void SingleUpload()
    {
        if (file != null)
        {
            string fileExtension = file.Name.Split(".").Last();
            if (fileExtension == "png" || fileExtension == "jpg" || fileExtension == "jpeg" || fileExtension == "gif")
            {
                //do something with bytes
                Stream stream = file.OpenReadStream(maxAllowedSize: 10000000);
                DateTime date = DateTime.Now;
                filePath = $"{env.WebRootPath}\\img\\{date.ToString("yyyyMMdd_hhmmss")}{file.Name}";
                FileStream fs = File.Create(filePath);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
                await AddImage(filePath);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Unsupported file type (supported file types: png, jpg, gif)");

            }
            this.StateHasChanged();
        }


    }
}

