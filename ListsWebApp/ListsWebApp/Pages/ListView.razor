@page "/listView/{listid}"

@using DataLibrary
@using Microsoft.Extensions.Configuration
@using ListsWebApp.Models
@inject IDataAccess _data
@inject IConfiguration _config
@inject Data.LoginState loginState;
@inject IJSRuntime JsRuntime;


@if (loginState.IsLoggedIn)
{
    <h3>ListView</h3>

    @if (listItems == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul>
            @foreach (var listItem in listItems)
            {
                <li>
                    <input type="checkbox" checked="@listItem.IsDone" @onchange="() => UpdateCheckbox(listItem.Id, Convert.ToInt32(!listItem.IsDone))" />
                    <la>@listItem.Title</la>
                    <button class="btn btn-danger" @onclick="() => DeleteItem(listItem.Id)">X</button>
                </li>
            }
        </ul>
    }

    <input placeholder="Item name..." @bind="newItem" />
    <button class="btn btn-primary" @onclick="AddItem">Add item</button>
    <h3>Share list</h3>
    <input placeholder="Username..." @bind="usernameToShare" />
    <button class="btn btn-primary" @onclick="ShareList">Share List</button>


}
else
{
    <h3>Please log in first</h3>
}
@code {
    [Parameter]
    public string listid { get; set; }
    private string newItem;
    List<ListItem> listItems;
    private string usernameToShare;


    protected override async Task OnInitializedAsync()
    {
        string sql = $"select * from listitems where listid = '{listid}'";
        listItems = await _data.LoadData<ListItem, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }

    private async Task UpdateTitle(int id, string title)
    {
        string sql = $"update listitems set title = '{title}' where id = '{id}'";
        await _data.SaveData(sql, new { }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task UpdateCheckbox(int id, int isDone)
    {
        string sql = $"update listitems set isDone = '{isDone}' where id = '{id}'";
        await _data.SaveData(sql, new { }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task AddItem()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            string sql = "insert into listitems (title, listid, isDone) values (@Title, @ListId, @IsDone);";
            await _data.SaveData(sql, new { Title = newItem, ListId = listid, IsDone = 0 }, _config.GetConnectionString("default"));
            newItem = string.Empty;
            await OnInitializedAsync();
        }
    }

    private async Task DeleteItem(int id)
    {
        string sql = $"delete from listitems where id = '{id}'";
        await _data.SaveData(sql, new { Title = newItem, ListId = 1, IsDone = 0 }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task ShareList()
    {
        string sql = $"select * from users where login = '{usernameToShare}'";
        List<User> users = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        if (users.Count == 1 && users[0].Id!=loginState.userId)
        {

            sql = $"insert into sharedlists (userid, listid) values (@UserId, @ListId);";
            await _data.SaveData(sql, new { UserId = users[0].Id, ListId = listid }, _config.GetConnectionString("default"));

        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Could not find given username");

        }
        await OnInitializedAsync();
    }
}

