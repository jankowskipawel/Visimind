@page "/listView/{listid}"

@using DataLibrary
@using Microsoft.Extensions.Configuration
@using ListsWebApp.Models
@using System.IO
@using System.Net
@using System.Xml.Linq
@using System.Collections.Specialized
@using Microsoft.AspNetCore.Hosting
@inject IDataAccess _data
@inject IConfiguration _config
@inject Data.LoginState loginState;
@inject IJSRuntime JsRuntime;
@inject IWebHostEnvironment env


@if (loginState.IsLoggedIn)
{
    <h3>ListView</h3>

    @if (listItems == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul>
            @foreach (var listItem in listItems)
            {
                <li>
                <input type="checkbox" checked="@listItem.IsDone" @onchange="() => UpdateCheckbox(listItem.Id, Convert.ToInt32(!listItem.IsDone))" />
                @if (listItem.Title.StartsWith($"{env.WebRootPath}\\img"))
                {
                    <img style="max-height:500px;max-width:500px;" src="\img\@listItem.Title.Split("\\").Last()" />
                }
                else
                {
                    <la>@listItem.Title</la>
                }
                <button class="btn btn-danger" @onclick="() => DeleteItem(listItem.Id)">X</button>
                                                                                       </li>
            }
        </ul>
    }

    <input placeholder="Item name..." @bind="newItem" />
    <button class="btn btn-primary" @onclick="AddItem">Add item</button>
    <form @onsubmit="SingleUpload">
        <InputFile OnChange="OnInputFileChange" />
        <br /><br />
        <button type="submit">Add image</button>
    </form>


    <h3>Share list</h3>
    <input placeholder="Username..." @bind="usernameToShare" />
    <button class="btn btn-primary" @onclick="ShareList">Share List</button>


}
else
{
    <h3>Please log in first</h3>
}
@code {
    [Parameter]
    public string listid { get; set; }
    private string newItem;
    List<ListItem> listItems;
    List<ListWA> userOwnedLists;
    private string usernameToShare;
    IBrowserFile file;
    string filePath;


    protected override async Task OnInitializedAsync()
    {
        string sql = $"select * from listitems where listid = '{listid}'";
        listItems = await _data.LoadData<ListItem, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }

    private async Task UpdateCheckbox(int id, int isDone)
    {
        string sql = $"update listitems set isDone = '{isDone}' where id = '{id}'";
        await _data.SaveData(sql, new { }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task AddItem()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            string sql = "insert into listitems (title, listid, isDone) values (@Title, @ListId, @IsDone);";
            await _data.SaveData(sql, new { Title = newItem, ListId = listid, IsDone = 0 }, _config.GetConnectionString("default"));
            newItem = string.Empty;
            await OnInitializedAsync();
        }
    }

    private async Task AddImage(string path)
    {
        string sql = "insert into listitems (title, listid, isDone) values (@Title, @ListId, @IsDone);";
        await _data.SaveData(sql, new { Title = path, ListId = listid, IsDone = 0 }, _config.GetConnectionString("default"));
        await OnInitializedAsync();
    }

    private async Task DeleteItem(int id)
    {
        string sql = $"delete from listitems where id = '{id}'";
        await _data.SaveData(sql, new { Title = newItem, ListId = 1, IsDone = 0 }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task ShareList()
    {
        string sql = $"select * from users where login = '{usernameToShare}'";
        List<User> users = await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        if (users.Count == 1 && users[0].Id != loginState.userId)
        {
            sql = $"select * from lists where userid = '{users[0].Id}'";
            userOwnedLists = await _data.LoadData<ListWA, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            if (!isInList(userOwnedLists, listid))
            {
                sql = $"insert into sharedlists (userid, listid) values (@UserId, @ListId);";
                await _data.SaveData(sql, new { UserId = users[0].Id, ListId = listid }, _config.GetConnectionString("default"));
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "You can't share list with the owner");
            }
            usernameToShare = "";

        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Could not find given username");

        }
        await OnInitializedAsync();
    }

    bool isInList(List<ListWA> lists, string id)
    {
        foreach (var list in lists)
        {
            if (list.Id.ToString() == id)
            {
                return true;
            }
        }
        return false;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
        this.StateHasChanged();
    }

    private async void SingleUpload()
    {
        string fileExtension = file.Name.Split(".").Last();
        if (fileExtension == "png" || fileExtension == "jpg" || fileExtension == "jpeg" || fileExtension == "gif")
        {
            //do something with bytes
            Stream stream = file.OpenReadStream(maxAllowedSize:10000000);
            DateTime date = DateTime.Now;
            filePath = $"{env.WebRootPath}\\img\\{date.ToString("yyyyMMdd_hhmmss")}{file.Name}";
            FileStream fs = File.Create(filePath);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
            await AddImage(filePath);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Unsupported file type (supported file types: png, jpg, gif)");

        }
        this.StateHasChanged();


    }
}

