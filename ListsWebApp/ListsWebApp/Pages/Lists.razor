@page "/lists"

@using DataLibrary
@using ListsWebApp.Data
@using Microsoft.Extensions.Configuration
@using ListsWebApp.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IDataAccess _data
@inject IConfiguration _config
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Data.LoginState loginState;
@inject ProtectedLocalStorage browserStorage


@if (loginState.IsLoggedIn)
{
    <h3 class="d-inline">Your Lists</h3>
    <button class="btn btn-primary d-inline ml-4" @onclick="()=>OnInitializedAsync()">Refresh</button>

    @if (lists == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul>
            @foreach (var list in lists)
            {
                <li>
                    <button class="btn btn-outline-dark mt-1" @onclick="() => SelectList(list.Id)">@list.Name</button>
                    <button class="btn btn-danger py-0 px-1 ml-2" @onclick="() => DeleteData(list.Id)">x</button>
                </li>
            }
        </ul>
    }

    <input placeholder="List name..." @bind="newItem" />
    <button class="btn btn-primary" @onclick="AddList">Add list</button>

    <h3 class="mt-5">Shared Lists</h3>
    <ul>
        @foreach (var list in sharedLists)
        {
            <li>
                <button class="btn btn-outline-dark mt-1" @onclick="() => SelectList(list.Id)">@list.Name</button>
                <button class="btn btn-danger py-0 px-1 ml-2" @onclick="() => DeleteData(list.Id)">x</button>
            </li>
        }
    </ul>
}
else
{
    <h3>Please log in first</h3>
}


@code {
    private string newItem;
    List<ListWA> lists;
    List<ListWA> sharedLists = new List<ListWA>();
    List<SharedList> sharedListsIDs;


    protected override async Task OnInitializedAsync()
    {
        if (loginState.IsLoggedIn)
        {
            string sql = $"select * from lists where userid = '{loginState.userId}'";
            lists = await _data.LoadData<ListWA, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            //get shared lists ids
            sql = $"select * from sharedlists where userid = '{loginState.userId}'";
            sharedListsIDs = await _data.LoadData<SharedList, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            List<int> listIDsToShow = new List<int>();
            foreach (var listIDs in sharedListsIDs)
            {
                listIDsToShow.Add(listIDs.ListId);
            }
            if (listIDsToShow.Count > 0)
            {
                //get lists
                sql = $"select * from lists where id in ({String.Join(", ", listIDsToShow)});";
                sharedLists = await _data.LoadData<ListWA, dynamic>(sql, new { }, _config.GetConnectionString("default"));
            }
        }
    }

    private async Task AddList()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            string sql = "insert into lists (userid, name) values (@UserId, @Name);";
            await _data.SaveData(sql, new { UserId = loginState.userId, Name = newItem }, _config.GetConnectionString("default"));
            newItem = string.Empty;
            await OnInitializedAsync();
        }
    }

    private async Task DeleteData(int id)
    {
        string sql = $"delete from listitems where listid = '{id}'";
        await _data.SaveData(sql, new { Title = newItem, ListId = 1, IsDone = 0 }, _config.GetConnectionString("default"));
        sql = $"delete from lists where id = '{id}'";
        await _data.SaveData(sql, new { Title = newItem, ListId = 1, IsDone = 0 }, _config.GetConnectionString("default"));


        await OnInitializedAsync();
    }

    private void SelectList(int id)
    {
        navigationManager.NavigateTo($"/listView/{id}");
    }
}
