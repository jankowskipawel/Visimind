# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CheckCoordinates
                                 A QGIS plugin
 This plugin checks coordinates and displays list of coordinate system for which x and y are inside bounds
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Pawe≈Ç Jankowski
        email                : paweljankowski246@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
import sqlite3
from qgis.core import QgsProject, QgsApplication, QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsPointXY, QgsRectangle


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .check_coordinates_dialog import CheckCoordinatesDialog
import os.path



class CheckCoordinates:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CheckCoordinates_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Check Coordinates')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CheckCoordinates', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/check_coordinates/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Check coordinates'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Check Coordinates'),
                action)
            self.iface.removeToolBarIcon(action)

    def check_coordinates(self):
        #connect to database and select all extents
        con = sqlite3.connect(QgsApplication.srsDatabaseFilePath())
        cur = con.cursor()
        cur.execute('select * from tbl_bounds')
        rows = cur.fetchall()
        #get values given by user
        user_x = float(self.dlg.lineEdit.text())
        user_y = float(self.dlg.lineEdit_2.text())
        for crs in rows:
            srid = crs[0]
            min_x = crs[1]
            min_y = crs[4]
            max_x = crs[3]
            max_y = crs[2]
            if (isinstance(min_x, float) and isinstance(min_y, float) and isinstance(max_x, float) and isinstance(max_y, float)):
                extent = QgsRectangle(min_x, min_y, max_x, max_y)
                #get name and id of crs
                cur.execute(f"select description, auth_name, auth_id, parameters from tbl_srs where srid = '{srid}'")
                name_row = cur.fetchall()
                if len(name_row)==1:
                    name = name_row[0][0]
                    symbol = name_row[0][1]
                    symbol_id = name_row[0][2]
                    if not(symbol_id.upper().isupper()):
                        try:
                            #convert extent from wgs84 to currently used crs
                            transform = QgsCoordinateTransform(QgsCoordinateReferenceSystem("EPSG:4326"), QgsCoordinateReferenceSystem(f"{symbol}:{symbol_id}"), QgsProject.instance())
                            transform.setBallparkTransformsAreAppropriate(True)
                            converted_extent = transform.transformBoundingBox(extent)
                            #self.dlg.textEdit.append(f"{symbol}{symbol_id}, x<{converted_extent.xMinimum()}~{converted_extent.xMaximum()}>, y<{converted_extent.yMinimum()}~{converted_extent.yMaximum()}> {min_x} {max_x}, {min_y} {max_y}")
                            if(((user_x >= converted_extent.xMinimum()) and (user_x <= converted_extent.xMaximum())) and ((user_y >= converted_extent.yMinimum()) and (user_y <= converted_extent.yMaximum()))):
                                self.dlg.textEdit.append(f"{name}  ({symbol}:{symbol_id})")
                        except Exception:
                            pass
        cur.close()
        con.close()



    def run(self):
        """Run method that performs all the real work"""
        
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CheckCoordinatesDialog()
            self.dlg.pushButton.clicked.connect(self.check_coordinates)


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            pass
